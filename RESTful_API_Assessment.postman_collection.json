{
  "info": {
    "name": "RESTful API Assessment",
    "description": "Complete Postman collection for testing the RESTful API implementation with all endpoints, validation, and error handling examples.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "apiVersion",
      "value": "v1",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check if the API is running and healthy"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Root Endpoint",
      "item": [
        {
          "name": "Get API Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Get API information and available endpoints"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users"]
            },
            "description": "Retrieve all users with optional pagination and filtering"
          },
          "response": []
        },
        {
          "name": "Get All Users with Pagination",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users?page=1&limit=5",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            },
            "description": "Get users with pagination"
          },
          "response": []
        },
        {
          "name": "Get All Users with Filtering",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users?name=John&email=john.doe@example.com",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users"],
              "query": [
                {
                  "key": "name",
                  "value": "John"
                },
                {
                  "key": "email",
                  "value": "john.doe@example.com"
                }
              ]
            },
            "description": "Get users filtered by name and email"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users/550e8400-e29b-41d4-a716-446655440000",
              "host": ["{{baseUrl}}"],
              "path": [
                "api",
                "{{apiVersion}}",
                "users",
                "550e8400-e29b-41d4-a716-446655440000"
              ]
            },
            "description": "Get a specific user by their ID"
          },
          "response": []
        },
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('userId', response.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"test.user@example.com\",\n  \"age\": 25\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users"]
            },
            "description": "Create a new user"
          },
          "response": []
        },
        {
          "name": "Create User - Validation Error",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"T\",\n  \"email\": \"invalid-email\",\n  \"age\": 15\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users"]
            },
            "description": "Test validation errors for user creation"
          },
          "response": []
        },
        {
          "name": "Update User (PUT)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated User\",\n  \"email\": \"updated.user@example.com\",\n  \"age\": 30\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users", "{{userId}}"]
            },
            "description": "Update a user completely (PUT method)"
          },
          "response": []
        },
        {
          "name": "Update User (PATCH)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"age\": 35\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users", "{{userId}}"]
            },
            "description": "Update a user partially (PATCH method)"
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users", "{{userId}}"]
            },
            "description": "Delete a user"
          },
          "response": []
        },
        {
          "name": "Get User - Not Found",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users/550e8400-e29b-41d4-a716-446655440999",
              "host": ["{{baseUrl}}"],
              "path": [
                "api",
                "{{apiVersion}}",
                "users",
                "550e8400-e29b-41d4-a716-446655440999"
              ]
            },
            "description": "Test 404 error for non-existent user"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "products"]
            },
            "description": "Retrieve all products with optional pagination and filtering"
          },
          "response": []
        },
        {
          "name": "Get Products with Filters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/products?category=electronics&minPrice=100&maxPrice=1000&inStock=true",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "products"],
              "query": [
                {
                  "key": "category",
                  "value": "electronics"
                },
                {
                  "key": "minPrice",
                  "value": "100"
                },
                {
                  "key": "maxPrice",
                  "value": "1000"
                },
                {
                  "key": "inStock",
                  "value": "true"
                }
              ]
            },
            "description": "Get products with multiple filters"
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/products/660e8400-e29b-41d4-a716-446655440000",
              "host": ["{{baseUrl}}"],
              "path": [
                "api",
                "{{apiVersion}}",
                "products",
                "660e8400-e29b-41d4-a716-446655440000"
              ]
            },
            "description": "Get a specific product by its ID"
          },
          "response": []
        },
        {
          "name": "Create Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('productId', response.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product\",\n  \"description\": \"A test product for API testing\",\n  \"price\": 99.99,\n  \"category\": \"electronics\",\n  \"inStock\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "products"]
            },
            "description": "Create a new product"
          },
          "response": []
        },
        {
          "name": "Create Product - Validation Error",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"price\": -10,\n  \"category\": \"invalid-category\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "products"]
            },
            "description": "Test validation errors for product creation"
          },
          "response": []
        },
        {
          "name": "Update Product (PUT)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Product\",\n  \"description\": \"Updated product description\",\n  \"price\": 149.99,\n  \"category\": \"clothing\",\n  \"inStock\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "products", "{{productId}}"]
            },
            "description": "Update a product completely (PUT method)"
          },
          "response": []
        },
        {
          "name": "Update Product (PATCH)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"price\": 129.99,\n  \"inStock\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "products", "{{productId}}"]
            },
            "description": "Update a product partially (PATCH method)"
          },
          "response": []
        },
        {
          "name": "Delete Product",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "products", "{{productId}}"]
            },
            "description": "Delete a product"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Get All Orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "orders"]
            },
            "description": "Retrieve all orders with optional pagination and filtering"
          },
          "response": []
        },
        {
          "name": "Get Orders with Filters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/orders?status=delivered&minAmount=500&maxAmount=2000",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "orders"],
              "query": [
                {
                  "key": "status",
                  "value": "delivered"
                },
                {
                  "key": "minAmount",
                  "value": "500"
                },
                {
                  "key": "maxAmount",
                  "value": "2000"
                }
              ]
            },
            "description": "Get orders with multiple filters"
          },
          "response": []
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/orders/770e8400-e29b-41d4-a716-446655440000",
              "host": ["{{baseUrl}}"],
              "path": [
                "api",
                "{{apiVersion}}",
                "orders",
                "770e8400-e29b-41d4-a716-446655440000"
              ]
            },
            "description": "Get a specific order by its ID"
          },
          "response": []
        },
        {
          "name": "Create Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('orderId', response.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"products\": [\n    {\n      \"productId\": \"660e8400-e29b-41d4-a716-446655440000\",\n      \"quantity\": 2\n    },\n    {\n      \"productId\": \"660e8400-e29b-41d4-a716-446655440001\",\n      \"quantity\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "orders"]
            },
            "description": "Create a new order with multiple products"
          },
          "response": []
        },
        {
          "name": "Create Order - Invalid User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440999\",\n  \"products\": [\n    {\n      \"productId\": \"660e8400-e29b-41d4-a716-446655440000\",\n      \"quantity\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "orders"]
            },
            "description": "Test error when creating order with non-existent user"
          },
          "response": []
        },
        {
          "name": "Create Order - Invalid Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"products\": [\n    {\n      \"productId\": \"660e8400-e29b-41d4-a716-446655440999\",\n      \"quantity\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "orders"]
            },
            "description": "Test error when creating order with non-existent product"
          },
          "response": []
        },
        {
          "name": "Update Order Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"processing\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "orders", "{{orderId}}"]
            },
            "description": "Update order status to processing"
          },
          "response": []
        },
        {
          "name": "Update Order Status - Invalid",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"invalid-status\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "orders", "{{orderId}}"]
            },
            "description": "Test validation error for invalid order status"
          },
          "response": []
        },
        {
          "name": "Delete Order",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "orders", "{{orderId}}"]
            },
            "description": "Delete an order"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Handling Examples",
      "item": [
        {
          "name": "404 Not Found",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/nonexistent",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "nonexistent"]
            },
            "description": "Test 404 error for non-existent endpoint"
          },
          "response": []
        },
        {
          "name": "400 Bad Request - Invalid UUID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users/invalid-uuid",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users", "invalid-uuid"]
            },
            "description": "Test 400 error for invalid UUID format"
          },
          "response": []
        },
        {
          "name": "400 Bad Request - Malformed JSON",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"invalid\": json}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users"]
            },
            "description": "Test 400 error for malformed JSON"
          },
          "response": []
        },
        {
          "name": "409 Conflict - Duplicate Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Duplicate User\",\n  \"email\": \"john.doe@example.com\",\n  \"age\": 30\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "users"]
            },
            "description": "Test 409 error for duplicate email"
          },
          "response": []
        }
      ]
    }
  ]
}
